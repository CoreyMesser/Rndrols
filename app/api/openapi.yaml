openapi: 3.0.0
info:
  title: Random Rolls
  description: Roll a set of dice against a known set to determin statistical averages.
  version: "0.0.1"
servers:
  - url: /rndrolls
    description: Main server url
paths:
  /roll:
      post:
        summary: Roll the dice.
        description: Rolls the bag of dice, if no dice are specified rolls a default set.
        requestBody:
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  dice:
                    type: string
                    properties:
                      dice_bag:
                        type: array
                        items:
                          type: array
                          items:
                            type: integer
                      num_rolls:
                        type: integer
                      data_set:
                        type: integer
        responses:
          '200':
            description: Ok
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Message'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        operationId: connectors.rolldice
  /avg/{session_id}:
    post:
      summary: Get the avg of the dice rolled
      description: Returns a truncated data set with dice rolled, num of sets, and final avg
      parameters:
        - in: path
          name: session_id
          required: true
          schema:
            type: integer
      operationId: connectors.get_avg
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Set'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /minmax/{session_id}:
    post:
      summary: Get the avg of the dice rolled
      description: Returns a truncated data set with dice rolled, num of sets, and final avg
      parameters:
        - in: path
          name: session_id
          required: true
          schema:
            type: integer
      operationId: connectors.get_min_max
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Set'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Error:
      properties:
        code:
          description: A code for the specific error.  Used to help in determining
            possible root causes of an error.
          type: string
        message:
          description: A message providing additional detail for an error.
          type: string
      type: object
    Message:
      example:
        level: INFO
        message: message
      properties:
        level:
          description: A level for the specific message.
          enum:
            - INFO
            - WARN
            - DEBUG
          type: string
        message:
          description: A message providing additional detail for message.
          type: string
      type: object
    KeyValue:
      description: A simple key-value pair.
      example:
        value: value
        key: key
      properties:
        key:
          description: A unique key for this pair.
          type: string
        value:
          description: A value for this pair.
          type: string
      required:
        - key
        - value
      type: object
    Set:
      properties:
        message:
          description: JSON block
          type: array
    Status:
      properties:
        code:
          description: response code
          type: string
        message:
          description: response message
          type: string